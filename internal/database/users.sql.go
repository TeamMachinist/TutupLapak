// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS(SELECT 1 FROM users_auth WHERE email = $1) as exists
`

func (q *Queries) CheckEmailExists(ctx context.Context, email pgtype.Text) (bool, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkPhoneExists = `-- name: CheckPhoneExists :one
SELECT EXISTS(SELECT 1 FROM users_auth WHERE phone = $1) as exists
`

func (q *Queries) CheckPhoneExists(ctx context.Context, phone pgtype.Text) (bool, error) {
	row := q.db.QueryRow(ctx, checkPhoneExists, phone)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserAuth = `-- name: CreateUserAuth :one
INSERT INTO users_auth (email, phone, password_hash)
VALUES ($1, $2, $3)
RETURNING id, email, phone, password_hash, created_at
`

type CreateUserAuthParams struct {
	Email        pgtype.Text `json:"email"`
	Phone        pgtype.Text `json:"phone"`
	PasswordHash string      `json:"password_hash"`
}

func (q *Queries) CreateUserAuth(ctx context.Context, arg CreateUserAuthParams) (UsersAuth, error) {
	row := q.db.QueryRow(ctx, createUserAuth, arg.Email, arg.Phone, arg.PasswordHash)
	var i UsersAuth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAuthByEmail = `-- name: GetUserAuthByEmail :one
SELECT id, email, phone, password_hash, created_at
FROM users_auth
WHERE email = $1
`

func (q *Queries) GetUserAuthByEmail(ctx context.Context, email pgtype.Text) (UsersAuth, error) {
	row := q.db.QueryRow(ctx, getUserAuthByEmail, email)
	var i UsersAuth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAuthByID = `-- name: GetUserAuthByID :one
SELECT id, email, phone, password_hash, created_at
FROM users_auth
WHERE id = $1
`

func (q *Queries) GetUserAuthByID(ctx context.Context, id pgtype.UUID) (UsersAuth, error) {
	row := q.db.QueryRow(ctx, getUserAuthByID, id)
	var i UsersAuth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAuthByPhone = `-- name: GetUserAuthByPhone :one
SELECT id, email, phone, password_hash, created_at
FROM users_auth
WHERE phone = $1
`

func (q *Queries) GetUserAuthByPhone(ctx context.Context, phone pgtype.Text) (UsersAuth, error) {
	row := q.db.QueryRow(ctx, getUserAuthByPhone, phone)
	var i UsersAuth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users_auth
SET email = $2
WHERE id = $1
RETURNING id, email, phone, password_hash, created_at
`

type UpdateUserEmailParams struct {
	ID    pgtype.UUID `json:"id"`
	Email pgtype.Text `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (UsersAuth, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.ID, arg.Email)
	var i UsersAuth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserPhone = `-- name: UpdateUserPhone :one
UPDATE users_auth
SET phone = $2
WHERE id = $1
RETURNING id, email, phone, password_hash, created_at
`

type UpdateUserPhoneParams struct {
	ID    pgtype.UUID `json:"id"`
	Phone pgtype.Text `json:"phone"`
}

func (q *Queries) UpdateUserPhone(ctx context.Context, arg UpdateUserPhoneParams) (UsersAuth, error) {
	row := q.db.QueryRow(ctx, updateUserPhone, arg.ID, arg.Phone)
	var i UsersAuth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}
