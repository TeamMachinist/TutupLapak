// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, user_auth_id, email, phone, bank_account_name, bank_account_holder, bank_account_number
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at
`

type CreateUserParams struct {
	ID                uuid.UUID `json:"id"`
	UserAuthID        uuid.UUID `json:"user_auth_id"`
	Email             string    `json:"email"`
	Phone             string    `json:"phone"`
	BankAccountName   string    `json:"bank_account_name"`
	BankAccountHolder string    `json:"bank_account_holder"`
	BankAccountNumber string    `json:"bank_account_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.UserAuthID,
		arg.Email,
		arg.Phone,
		arg.BankAccountName,
		arg.BankAccountHolder,
		arg.BankAccountNumber,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByAuthID = `-- name: GetUserByAuthID :one
SELECT id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at FROM users WHERE user_auth_id = $1
`

func (q *Queries) GetUserByAuthID(ctx context.Context, userAuthID uuid.UUID) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByAuthID, userAuthID)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at FROM users WHERE phone = $1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phone)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserWithAuth = `-- name: GetUserWithAuth :one
SELECT 
    u.id,
    u.user_auth_id,
    u.email,
    u.phone,
    u.bank_account_name,
    u.bank_account_holder,
    u.bank_account_number,
    u.created_at,
    u.updated_at,
    ua.password_hash,
    ua.created_at as auth_created_at
FROM users u
JOIN users_auth ua ON u.user_auth_id = ua.id
WHERE u.id = $1
`

type GetUserWithAuthRow struct {
	ID                uuid.UUID `json:"id"`
	UserAuthID        uuid.UUID `json:"user_auth_id"`
	Email             string    `json:"email"`
	Phone             string    `json:"phone"`
	BankAccountName   string    `json:"bank_account_name"`
	BankAccountHolder string    `json:"bank_account_holder"`
	BankAccountNumber string    `json:"bank_account_number"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
	PasswordHash      string    `json:"password_hash"`
	AuthCreatedAt     time.Time `json:"auth_created_at"`
}

func (q *Queries) GetUserWithAuth(ctx context.Context, id uuid.UUID) (GetUserWithAuthRow, error) {
	row := q.db.QueryRow(ctx, getUserWithAuth, id)
	var i GetUserWithAuthRow
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordHash,
		&i.AuthCreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    email = COALESCE($2, email),
    phone = COALESCE($3, phone),
    bank_account_name = COALESCE($4, bank_account_name),
    bank_account_holder = COALESCE($5, bank_account_holder),
    bank_account_number = COALESCE($6, bank_account_number),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at
`

type UpdateUserParams struct {
	ID                uuid.UUID `json:"id"`
	Email             string    `json:"email"`
	Phone             string    `json:"phone"`
	BankAccountName   string    `json:"bank_account_name"`
	BankAccountHolder string    `json:"bank_account_holder"`
	BankAccountNumber string    `json:"bank_account_number"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Phone,
		arg.BankAccountName,
		arg.BankAccountHolder,
		arg.BankAccountNumber,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users SET
    email = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at
`

type UpdateUserEmailParams struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.ID, arg.Email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPhone = `-- name: UpdateUserPhone :one
UPDATE users SET
    phone = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at
`

type UpdateUserPhoneParams struct {
	ID    uuid.UUID `json:"id"`
	Phone string    `json:"phone"`
}

func (q *Queries) UpdateUserPhone(ctx context.Context, arg UpdateUserPhoneParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUserPhone, arg.ID, arg.Phone)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
