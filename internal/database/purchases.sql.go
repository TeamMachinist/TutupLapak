// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: purchases.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createPurchase = `-- name: CreatePurchase :exec
INSERT INTO purchases (
    id, sender_name, sender_contact_type, sender_contact_detail,
    purchased_items, payment_details, total_price
) VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreatePurchaseParams struct {
	ID                  uuid.UUID `json:"id"`
	SenderName          string    `json:"sender_name"`
	SenderContactType   string    `json:"sender_contact_type"`
	SenderContactDetail string    `json:"sender_contact_detail"`
	PurchasedItems      []byte    `json:"purchased_items"`
	PaymentDetails      []byte    `json:"payment_details"`
	TotalPrice          int       `json:"total_price"`
}

func (q *Queries) CreatePurchase(ctx context.Context, arg CreatePurchaseParams) error {
	_, err := q.db.Exec(ctx, createPurchase,
		arg.ID,
		arg.SenderName,
		arg.SenderContactType,
		arg.SenderContactDetail,
		arg.PurchasedItems,
		arg.PaymentDetails,
		arg.TotalPrice,
	)
	return err
}

const getPurchaseByID = `-- name: GetPurchaseByID :one
SELECT id, sender_name, sender_contact_type, sender_contact_detail,
       purchased_items, payment_details, total_price, status,
       created_at, updated_at
FROM purchases
WHERE id = $1::text
`

func (q *Queries) GetPurchaseByID(ctx context.Context, purchaseid string) (Purchases, error) {
	row := q.db.QueryRow(ctx, getPurchaseByID, purchaseid)
	var i Purchases
	err := row.Scan(
		&i.ID,
		&i.SenderName,
		&i.SenderContactType,
		&i.SenderContactDetail,
		&i.PurchasedItems,
		&i.PaymentDetails,
		&i.TotalPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePurchaseStatus = `-- name: UpdatePurchaseStatus :exec
UPDATE purchases
SET status = $1::text,
    updated_at = NOW()
WHERE id = $2::text
`

type UpdatePurchaseStatusParams struct {
	Status     string `json:"status"`
	Purchaseid string `json:"purchaseid"`
}

func (q *Queries) UpdatePurchaseStatus(ctx context.Context, arg UpdatePurchaseStatusParams) error {
	_, err := q.db.Exec(ctx, updatePurchaseStatus, arg.Status, arg.Purchaseid)
	return err
}
