// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: files.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (id, user_id, file_uri, file_thumbnail_uri) VALUES ($1, $2, $3, $4) RETURNING id, user_id, file_uri, file_thumbnail_uri, created_at
`

type CreateFileParams struct {
	ID               uuid.UUID `json:"id"`
	UserID           uuid.UUID `json:"user_id"`
	FileUri          string    `json:"file_uri"`
	FileThumbnailUri string    `json:"file_thumbnail_uri"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (Files, error) {
	row := q.db.QueryRow(ctx, createFile,
		arg.ID,
		arg.UserID,
		arg.FileUri,
		arg.FileThumbnailUri,
	)
	var i Files
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileUri,
		&i.FileThumbnailUri,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files WHERE id = $1
`

func (q *Queries) DeleteFile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFile, id)
	return err
}

const getFile = `-- name: GetFile :one
SELECT id, user_id, file_uri, file_thumbnail_uri, created_at FROM files WHERE id = $1
`

func (q *Queries) GetFile(ctx context.Context, id uuid.UUID) (Files, error) {
	row := q.db.QueryRow(ctx, getFile, id)
	var i Files
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FileUri,
		&i.FileThumbnailUri,
		&i.CreatedAt,
	)
	return i, err
}

const getFilesByID = `-- name: GetFilesByID :many
SELECT id, user_id, file_uri, file_thumbnail_uri, created_at FROM files WHERE id = ANY($1::uuid[])
`

func (q *Queries) GetFilesByID(ctx context.Context, dollar_1 []uuid.UUID) ([]Files, error) {
	rows, err := q.db.Query(ctx, getFilesByID, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Files{}
	for rows.Next() {
		var i Files
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FileUri,
			&i.FileThumbnailUri,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilesByUserID = `-- name: GetFilesByUserID :many
SELECT id, user_id, file_uri, file_thumbnail_uri, created_at FROM files WHERE user_id = $1
`

func (q *Queries) GetFilesByUserID(ctx context.Context, userID uuid.UUID) ([]Files, error) {
	rows, err := q.db.Query(ctx, getFilesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Files{}
	for rows.Next() {
		var i Files
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FileUri,
			&i.FileThumbnailUri,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
