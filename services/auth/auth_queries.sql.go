// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: auth_queries.sql

package main

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkExistedUserByEmail = `-- name: CheckExistedUserByEmail :one
SELECT 1 FROM users_auth WHERE email = $1
`

func (q *Queries) CheckExistedUserByEmail(ctx context.Context, email string) (int32, error) {
	row := q.db.QueryRow(ctx, checkExistedUserByEmail, email)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, phone, hashed_password, created_at, updated_at FROM users_auth WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (UsersAuth, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i UsersAuth
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const registerWithEmail = `-- name: RegisterWithEmail :exec
INSERT INTO users_auth (id, email, phone, hashed_password, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6)
`

type RegisterWithEmailParams struct {
	ID             pgtype.UUID        `json:"id"`
	Email          string             `json:"email"`
	Phone          string             `json:"phone"`
	HashedPassword string             `json:"hashed_password"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) RegisterWithEmail(ctx context.Context, arg RegisterWithEmailParams) error {
	_, err := q.db.Exec(ctx, registerWithEmail,
		arg.ID,
		arg.Email,
		arg.Phone,
		arg.HashedPassword,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
