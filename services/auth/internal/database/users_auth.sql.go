// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users_auth.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS(SELECT 1 FROM users_auth WHERE email = $1) as exists
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkPhoneExists = `-- name: CheckPhoneExists :one
SELECT EXISTS(SELECT 1 FROM users_auth WHERE phone = $1) as exists
`

func (q *Queries) CheckPhoneExists(ctx context.Context, phone string) (bool, error) {
	row := q.db.QueryRow(ctx, checkPhoneExists, phone)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserByEmail = `-- name: CreateUserByEmail :one
INSERT INTO users_auth (email, password_hash)
VALUES ($1, $2)
RETURNING 
    id, 
    COALESCE(email, '') as email,
    COALESCE(phone, '') as phone,       
    password_hash, 
    created_at
`

type CreateUserByEmailParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

type CreateUserByEmailRow struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	Phone        string    `json:"phone"`
	PasswordHash string    `json:"password_hash"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) CreateUserByEmail(ctx context.Context, arg CreateUserByEmailParams) (CreateUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, createUserByEmail, arg.Email, arg.PasswordHash)
	var i CreateUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const createUserByPhone = `-- name: CreateUserByPhone :one
INSERT INTO users_auth (phone, password_hash)
VALUES ($1, $2)
RETURNING 
    id, 
    COALESCE(email, '') as email,
    COALESCE(phone, '') as phone,       
    password_hash, 
    created_at
`

type CreateUserByPhoneParams struct {
	Phone        string `json:"phone"`
	PasswordHash string `json:"password_hash"`
}

type CreateUserByPhoneRow struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	Phone        string    `json:"phone"`
	PasswordHash string    `json:"password_hash"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) CreateUserByPhone(ctx context.Context, arg CreateUserByPhoneParams) (CreateUserByPhoneRow, error) {
	row := q.db.QueryRow(ctx, createUserByPhone, arg.Phone, arg.PasswordHash)
	var i CreateUserByPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAuthByEmail = `-- name: GetUserAuthByEmail :one
SELECT
    id,
    COALESCE(email, '') as email,
    COALESCE(phone, '') as phone,
    password_hash,
    created_at
FROM users_auth
WHERE email = $1
`

type GetUserAuthByEmailRow struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	Phone        string    `json:"phone"`
	PasswordHash string    `json:"password_hash"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) GetUserAuthByEmail(ctx context.Context, email string) (GetUserAuthByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserAuthByEmail, email)
	var i GetUserAuthByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAuthByID = `-- name: GetUserAuthByID :one
SELECT
    id,
    COALESCE(email, '') as email,
    COALESCE(phone, '') as phone,
    password_hash,
    created_at
FROM users_auth
WHERE id = $1
`

type GetUserAuthByIDRow struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	Phone        string    `json:"phone"`
	PasswordHash string    `json:"password_hash"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) GetUserAuthByID(ctx context.Context, id uuid.UUID) (GetUserAuthByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserAuthByID, id)
	var i GetUserAuthByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}

const getUserAuthByPhone = `-- name: GetUserAuthByPhone :one
SELECT
    id,
    COALESCE(email, '') as email,
    COALESCE(phone, '') as phone,
    password_hash,
    created_at
FROM users_auth
WHERE phone = $1
`

type GetUserAuthByPhoneRow struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	Phone        string    `json:"phone"`
	PasswordHash string    `json:"password_hash"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) GetUserAuthByPhone(ctx context.Context, phone string) (GetUserAuthByPhoneRow, error) {
	row := q.db.QueryRow(ctx, getUserAuthByPhone, phone)
	var i GetUserAuthByPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.CreatedAt,
	)
	return i, err
}
