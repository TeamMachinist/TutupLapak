// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = $1) as exists
`

func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkPhoneExists = `-- name: CheckPhoneExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = $1) as exists
`

func (q *Queries) CheckPhoneExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkPhoneExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserFromUserAuth = `-- name: CreateUserFromUserAuth :one
INSERT INTO users (id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at
`

type CreateUserFromUserAuthParams struct {
	ID                uuid.UUID  `json:"id"`
	UserAuthID        uuid.UUID  `json:"user_auth_id"`
	FileID            *uuid.UUID `json:"file_id"`
	Email             string     `json:"email"`
	Phone             string     `json:"phone"`
	BankAccountName   string     `json:"bank_account_name"`
	BankAccountHolder string     `json:"bank_account_holder"`
	BankAccountNumber string     `json:"bank_account_number"`
}

func (q *Queries) CreateUserFromUserAuth(ctx context.Context, arg CreateUserFromUserAuthParams) (Users, error) {
	row := q.db.QueryRow(ctx, createUserFromUserAuth,
		arg.ID,
		arg.UserAuthID,
		arg.FileID,
		arg.Email,
		arg.Phone,
		arg.BankAccountName,
		arg.BankAccountHolder,
		arg.BankAccountNumber,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByAuthID = `-- name: GetUserByAuthID :one
SELECT id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at FROM users WHERE user_auth_id = $1
`

func (q *Queries) GetUserByAuthID(ctx context.Context, userAuthID uuid.UUID) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByAuthID, userAuthID)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at FROM users WHERE phone = $1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phone)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    file_id = COALESCE($2, file_id),
    bank_account_name = $3,
    bank_account_holder = $4,
    bank_account_number = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at
`

type UpdateUserParams struct {
	ID                uuid.UUID  `json:"id"`
	FileID            *uuid.UUID `json:"file_id"`
	BankAccountName   string     `json:"bank_account_name"`
	BankAccountHolder string     `json:"bank_account_holder"`
	BankAccountNumber string     `json:"bank_account_number"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FileID,
		arg.BankAccountName,
		arg.BankAccountHolder,
		arg.BankAccountNumber,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE users SET
    email = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at
`

type UpdateUserEmailParams struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.ID, arg.Email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPhone = `-- name: UpdateUserPhone :one
UPDATE users SET
    phone = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_auth_id, file_id, email, phone, bank_account_name, bank_account_holder, bank_account_number, created_at, updated_at
`

type UpdateUserPhoneParams struct {
	ID    uuid.UUID `json:"id"`
	Phone string    `json:"phone"`
}

func (q *Queries) UpdateUserPhone(ctx context.Context, arg UpdateUserPhoneParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUserPhone, arg.ID, arg.Phone)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.UserAuthID,
		&i.FileID,
		&i.Email,
		&i.Phone,
		&i.BankAccountName,
		&i.BankAccountHolder,
		&i.BankAccountNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
